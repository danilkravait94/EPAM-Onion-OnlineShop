<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Onion.Domain.Core</name>
  </assembly>
  <members>
  </members>
  <assembly>
    <name>Onion.Domain.Interfaces</name>
  </assembly>
  <members>
    <!-- Badly formed XML comment ignored for member "T:Onion.Domain.Interfaces.IRepository`1" -->
    <member name="M:Onion.Domain.Interfaces.IRepository`1.GetAll">
      <summary>
        Get all
      </summary>
      <returns></returns>
    </member>
    <member name="M:Onion.Domain.Interfaces.IRepository`1.Get(System.Int32)">
      <summary>
        Get by id
      </summary>
      <param name="id"></param>
      <returns></returns>
    </member>
    <member name="M:Onion.Domain.Interfaces.IRepository`1.Find(System.Func{`0,System.Boolean})">
      <summary>
        Find by predicate
      </summary>
      <param name="predicate"></param>
      <returns></returns>
    </member>
    <member name="M:Onion.Domain.Interfaces.IRepository`1.Create(`0)">
      <summary>
        Create an item
      </summary>
      <param name="item"></param>
    </member>
    <member name="M:Onion.Domain.Interfaces.IRepository`1.Update(`0)">
      <summary>
        update an item
      </summary>
      <param name="item"></param>
    </member>
    <member name="M:Onion.Domain.Interfaces.IRepository`1.Delete(`0)">
      <summary>
        Delete an item
      </summary>
      <param name="item"></param>
    </member>
    <member name="M:Onion.Domain.Interfaces.IRepository`1.Delete(System.Int32)">
      <summary>
        Delete by id
      </summary>
      <param name="id"></param>
    </member>
  </members>
  <assembly>
    <name>Onion.Infrastructure.Business</name>
  </assembly>
  <members>
    <member name="M:Onion.Infrastructure.Business.OrderService.GetOrder(Onion.Domain.Core.Roles.User,System.Nullable{System.Int32})">
      <summary>
        Return the order by user with id
      </summary>
      <param name="user">User whose order will be got</param>
      <param name="id">Id of order</param>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.OrderService.GetOrders(Onion.Domain.Core.Roles.User)">
      <summary>
        Returns all orders by user
      </summary>
      <param name="user">User whose order will be got</param>
      <returns>An IEnumerable of orders</returns>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if user was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.OrderService.MakeOrder(Onion.Domain.Core.Roles.User,Onion.Domain.Core.Order)">
      <summary>
        Create an order
      </summary>
      <param name="user">User whose order will be got</param>
      <param name="order">Orderf that will be added to the order list</param>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.OrderService.SetGetToOrder(Onion.Domain.Core.Roles.User,System.Nullable{System.Int32})">
      <summary>
        Sets status "Get" to the order
      </summary>
      <param name="user">User whose order will be got</param>
      <param name="id">THe id of order</param>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.OrderService.EditOrder(Onion.Domain.Core.Roles.User,Onion.Domain.Core.Order,System.String)">
      <summary>
        Edits the information of order
        Changes country
      </summary>
      <param name="user">User whose order will be got</param>
      <param name="order"></param>
      <param name="country"></param>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.OrderService.EditOrder(Onion.Domain.Core.Roles.User,Onion.Domain.Core.Order,System.Int32)">
      <summary>
        Edits the information of order
        Changes country
      </summary>
      <param name="user"></param>
      <param name="order"></param>
      <param name="number"></param>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.OrderService.EditOrder(Onion.Domain.Core.Roles.User,Onion.Domain.Core.Order,Onion.Domain.Core.Order)">
      <summary>
        Edits the information of order
        Changes country
      </summary>
      <param name="user"></param>
      <param name="order"></param>
      <param name="newOrder"></param>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.OrderService.CancelOrder(Onion.Domain.Core.Roles.User,System.Nullable{System.Int32})">
      <summary>
        Cancel the order
      </summary>
      <param name="user">User whose order will be got</param>
      <param name="id">The id of order</param>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.OrderService.ChangeStatus(Onion.Domain.Core.Roles.User,System.Nullable{System.Int32},Onion.Domain.Core.Enums.Statuses)">
      <summary>
        Change the status of order
      </summary>
      <param name="user">User whose order will be got</param>
      <param name="id">The id of order</param>
      <param name="status">The status the will be set to the order</param>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.ProductService.AddToBasket(Onion.Domain.Core.Roles.User,System.Nullable{System.Int32})">
      <summary>
        Add to basket the product
      </summary>
      <param name="user">User whose order will be got</param>
      <param name="id">The id of product</param>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.ProductService.DeleteFromBasket(Onion.Domain.Core.Roles.User,System.Nullable{System.Int32})">
      <summary>
        Delete a product from basket
      </summary>
      <param name="user">User whose order will be got</param>
      <param name="id">The id of product</param>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.ProductService.CreateProduct(Onion.Domain.Core.Product)">
      <summary>
        Creates a product and adds
        to the list of product
      </summary>
      <param name="product">The product that will be added</param>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.ProductService.DeleteProduct(Onion.Domain.Core.Product)">
      <summary>
        Delete a product from the list
      </summary>
      <param name="product">the product with this pruduct`s id will be deleted</param>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.ProductService.DeleteProduct(System.Nullable{System.Int32})">
      <summary>
        Delete a product from the list by id
      </summary>
      <param name="id">the product with this id will be deleted</param>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.ProductService.EditProduct(System.Nullable{System.Int32},System.String)">
      <summary>
        Edit product`s name
      </summary>
      <param name="id">The id of product</param>
      <param name="name">New name</param>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.ProductService.EditProduct(System.Nullable{System.Int32},System.Decimal)">
      <summary>
        Edit product`s price
      </summary>
      <param name="id">The id of product</param>
      <param name="price">New price</param>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.ProductService.EditProduct(System.Nullable{System.Int32},Onion.Domain.Core.Product)">
      <summary>
        Change a product with id to new product
      </summary>
      <param name="id">The id of product</param>
      <param name="newPro">The new product</param>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.ProductService.GetProduct(System.Nullable{System.Int32})">
      <summary>
        Get a product by id
      </summary>
      <param name="id">Id of searching product</param>
      <returns>the product with the id</returns>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.ProductService.GetProducts">
      <summary>
        Returns all products
      </summary>
      <returns>IEnumerable of products</returns>>
    </member>
    <member name="M:Onion.Infrastructure.Business.ProductService.GetBasket(Onion.Domain.Core.Roles.User)">
      <summary>
        Returns the products which are in the user`s basket
      </summary>
      <param name="user">User whose basket will be got</param>
      <returns>IEnumerable of products</returns>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.UserService.Exit">
      <summary>
        Exit from the account
      </summary>
      <returns>Guest account</returns>
    </member>
    <member name="M:Onion.Infrastructure.Business.UserService.GetUser(System.Nullable{System.Int32})">
      <summary>
        Get user by id
      </summary>
      <param name="id">The id of user</param>
      <returns>The looking for user</returns>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.UserService.GetUsers">
      <summary>
        Get all users
      </summary>
      <returns>IEnumerable of users</returns>
    </member>
    <member name="M:Onion.Infrastructure.Business.UserService.SetIn(System.String,System.String)">
      <summary>
        Sign in to the registered account
      </summary>
      <param name="email"></param>
      <param name="password"></param>
      <returns></returns>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.UserService.IsUsed(System.String)">
      <summary>
        Checking of using the email
      </summary>
      <param name="email"></param>
      <returns>true if email is used, false if the email is free</returns>
    </member>
    <member name="M:Onion.Infrastructure.Business.UserService.GetByEmail(System.String)">
      <summary>
        Get user by email
      </summary>
      <param name="email"></param>
      <returns>User</returns>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.UserService.SetUp(System.String,System.String,System.String,System.String,System.Int64)">
      <summary>
        Sign up with the card
      </summary>
      <param name="firstname"></param>
      <param name="lastname"></param>
      <param name="email"></param>
      <param name="password"></param>
      <param name="card">Number of card</param>
      <returns></returns>
    </member>
    <member name="M:Onion.Infrastructure.Business.UserService.SetUp(System.String,System.String,System.String,System.String)">
      <summary>
        Sign up without money and card
      </summary>
      <param name="firstname"></param>
      <param name="lastname"></param>
      <param name="email"></param>
      <param name="password"></param>
      <returns></returns>
    </member>
    <member name="M:Onion.Infrastructure.Business.UserService.AddUser(Onion.Domain.Core.Roles.User)">
      <summary>
        Adds user to the list
      </summary>
      <param name="user">The user that will be added</param>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.UserService.ChangeUsersInfo(Onion.Domain.Core.Roles.User,System.String,System.String)">
      <summary>
        Changes name and last of user
      </summary>
      <param name="user"></param>
      <param name="name"></param>
      <param name="lastname"></param>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.UserService.ChangeUsersPassword(Onion.Domain.Core.Roles.User,System.String)">
      <summary>
        Changes a password of user
      </summary>
      <param name="user"></param>
      <param name="password"></param>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.UserService.ChangeUsersInfo(Onion.Domain.Core.Roles.User,System.Decimal)">
      <summary>
        Changes money
      </summary>
      <param name="user"></param>
      <param name="money"></param>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.UserService.ChangeUsersInfo(Onion.Domain.Core.Roles.User,Onion.Domain.Core.Roles.User)">
      <summary>
        Changes to new user
      </summary>
      <param name="user"></param>
      <param name="newUser"></param>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
    <member name="M:Onion.Infrastructure.Business.UserService.ChangeUsersEmail(Onion.Domain.Core.Roles.User,System.String)">
      <summary>
        Changes the email of user
      </summary>
      <param name="user"></param>
      <param name="email"></param>
      <exception cref="T:Onion.Domain.Core.ValidateException">Thrown if parameter was null</exception>
    </member>
  </members>
  <assembly>
    <name>Onion.Services.Interfaces</name>
  </assembly>
  <members>
  </members>
    <assembly>
        <name>Onion.Infrastructure.Data</name>
    </assembly>
    <members>
        <member name="T:Onion.Infrastructure.Data.DBWork">
            <summary>
            Class for work with DataBase
            </summary>
        </member>
        <member name="M:Onion.Infrastructure.Data.DBWork.#ctor(System.Collections.Generic.List{Onion.Domain.Core.Product},System.Collections.Generic.List{Onion.Domain.Core.Roles.User})">
            <summary>
            Constructor
            </summary>
            <param name="products"></param>
            <param name="users"></param>
        </member>
        <member name="P:Onion.Infrastructure.Data.DBWork.Products">
            <summary>
            Get Products
            </summary>
        </member>
        <member name="P:Onion.Infrastructure.Data.DBWork.Users">
            <summary>
            Get Users
            </summary>
        </member>
        <member name="M:Onion.Infrastructure.Data.DBWork.Save">
            <summary>
            Save DataBase
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Onion.Infrastructure.Data.ProductRepository" -->
        <member name="M:Onion.Infrastructure.Data.ProductRepository.#ctor(Onion.Infrastructure.Data.Context)">
            <summary>
            Conection with DB
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:Onion.Infrastructure.Data.ProductRepository.Find(System.Func{Onion.Domain.Core.Product,System.Boolean})">
            <summary>
            Retrives ienumerable of product
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Onion.Infrastructure.Data.ProductRepository.Get(System.Int32)">
            <summary>
            get product by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Onion.Infrastructure.Data.ProductRepository.GetAll">
            <summary>
            get all products
            </summary>
            <returns></returns>
        </member>
        <member name="M:Onion.Infrastructure.Data.ProductRepository.Create(Onion.Domain.Core.Product)">
            <summary>
            Create a product
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Onion.Infrastructure.Data.ProductRepository.Delete(Onion.Domain.Core.Product)">
            <summary>
            Delete a product
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Onion.Infrastructure.Data.ProductRepository.Update(Onion.Domain.Core.Product)">
            <summary>
            Update a product
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Onion.Infrastructure.Data.ProductRepository.Delete(System.Int32)">
            <summary>
            Delete a product by id
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Onion.Infrastructure.Data.UserRepository.Find(System.Func{Onion.Domain.Core.Roles.User,System.Boolean})">
            <summary>
            Retrives ienumerable of user
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Onion.Infrastructure.Data.UserRepository.Get(System.Int32)">
            <summary>
            Get user by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Onion.Infrastructure.Data.UserRepository.GetAll">
            <summary>
            Get all users
            </summary>
            <returns></returns>
        </member>
        <member name="M:Onion.Infrastructure.Data.UserRepository.Create(Onion.Domain.Core.Roles.User)">
            <summary>
            Create an user
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Onion.Infrastructure.Data.UserRepository.Delete(Onion.Domain.Core.Roles.User)">
            <summary>
            Delete an user
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Onion.Infrastructure.Data.UserRepository.Update(Onion.Domain.Core.Roles.User)">
            <summary>
            Update the user by id
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Onion.Infrastructure.Data.UserRepository.Delete(System.Int32)">
            <summary>
            Delete an user by id
            </summary>
            <param name="id"></param>
        </member>
    </members>
</doc>
